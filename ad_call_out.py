# -*- coding: utf-8 -*-
"""AD_call_out

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_iCuD7TaP1lrqzmryQb8hDsqBariYS-Y
"""

!pip install ultralytics

from google.colab import drive
drive.mount('/content/drive')

!pip install tqdm --upgrade

import os
import shutil
import random
from tqdm.notebook import tqdm
from ultralytics import YOLO

!pwd

train_img_path = "./yolo_data/images/train/"
train_label_path = "./yolo_data/labels/train/"
val_img_path = "./yolo_data/images/val/"
val_label_path = "./yolo_data/labels/val/"

def train(path):
  files=list(set([name[:-4] for name in os.listdir(path)]))

  #creating directories

  os.makedirs(train_img_path,exist_ok=True)
  os.makedirs(train_label_path,exist_ok=True)




#copy train images and labels to correspondig folders

  for file in tqdm(files):
    shutil.copy2(path+file+'.jpg',train_img_path+file+'.jpg')
    shutil.copy2(path+file+'.txt',train_label_path+file+'.txt')

def val(path):
  files=list(set([name[:-4] for name in os.listdir(path)]))

  #creating directories

  os.makedirs(val_img_path,exist_ok=True)
  os.makedirs(val_label_path,exist_ok=True)

#copy train images and labels to correspondig folders

  for file in tqdm(files):
    shutil.copy2(path+file+'.jpg',val_img_path+file+'.jpg')
    shutil.copy2(path+file+'.txt',val_label_path+file+'.txt')

train("/content/drive/MyDrive/accident_detection/accident_detection_dataset/images_train/")

val("/content/drive/MyDrive/accident_detection/accident_detection_dataset/images_valid/")

# !yolo task = detect mode=train model=yolov8s.pt data=/content/drive/MyDrive/accident_detection/accident_detection_dataset/dataset.yaml project=/content/drive/MyDrive/accident_detection/accident_detection_dataset/Training_result name=accident_predicton
!yolo task=detect mode=train model=yolov8n.pt data=/content/drive/MyDrive/accident_detection/accident_detection_dataset/dataset.yaml  epochs=200

# !yolo task=detect mode=predict model=/content/drive/MyDrive/accident_detection/accident_detection_dataset/Training_result/accident_predicton2/weights/best.pt conf=0.55 source=/content/drive/MyDrive/accident_detection/accident_detection_dataset/images_test
!yolo task=detect mode=val model=yolov8n.pt source="/content/drive/MyDrive/accident_detection/accident_detection_dataset/Training_result/accident_predicton5/weights/best.pt" data=/content/drive/MyDrive/accident_detection/accident_detection_dataset/dataset.yaml

# !yolo task=segment mode=predict model=yolov8n-seg.pt source="/content/drive/MyDrive/accident_detection/accident_detection_dataset/Training_result/accident_predicton2/weights/best.pt"
!yolo task=detect mode=predict model=/content/drive/MyDrive/accident_detection/accident_detection_dataset/Training_result/accident_predicton5/weights/best.pt conf=0.25 source=/content/drive/MyDrive/accident_detection/accident_detection_dataset/images_test

import subprocess

def run_yolo_command():
    command = [
        "yolo",
        "task=detect",
        "mode=predict",
        "model=/content/drive/MyDrive/accident_detection/accident_detection_dataset/Training_result/accident_predicton2/weights/best.pt",
        "conf=0.25",
        "source=/content/drive/MyDrive/accident_detection/accident_detection_dataset/images_test"
    ]

    try:
        # Run the command
        result = subprocess.run(command, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print(result.stdout.decode())  # Print the command output
        return True
    except subprocess.CalledProcessError as e:
        # Handle error
        print(f"Command failed with error: {e.stderr.decode()}")
        return False

# Store the result in a boolean variable
yolo_success = run_yolo_command()

print(f"YOLO command successful: {yolo_success}")

!pip install twilio

!whatsapp-python code send.py

# !yolo task=classify mode=predict model=yolov8n-cls.pt source="/content/drive/MyDrive/accident_detection/accident_detection_dataset/Training_result/accident_predicton2/weights/best.pt"

model = YOLO('yolov8n-seg.pt')
model.predict(source='/content/drive/MyDrive/accident_detection/accident_detection_dataset/images_test/4026_jpeg.rf.6475d9b651132eb567a50bbe26b7b706.jpg')

!cp -r /content/runs/detect/predict /content/drive/MyDrive/accident_detection/accident_detection_dataset/output

!pip install twilio

# import matplotlib.pyplot as plt
# import cv2
# from google.colab.patches import cv2_imshow
# img=cv2.imread("/content/drive/MyDrive/accident_detection/accident_detection_dataset/images_test/4026_jpeg.rf.6475d9b651132eb567a50bbe26b7b706.jpg")
# cv2_imshow(img)

# from twilio.rest import Client

# account_sid = 'AC80a7eb2fb93c13155ed687ce9c39bb97'
# auth_token = 'a26dbf30824b1cada250b145532f12bd'
# client = Client(account_sid, auth_token)

# message = client.messages.create(
#   from_='whatsapp:+14155238886',
#   body='Severe accident',
#   to='whatsapp:+918281884477'
# )

# print(message.sid)

"""# **Image and message**"""

from twilio.rest import Client

account_sid = 'AC80a7eb2fb93c13155ed687ce9c39bb97'
auth_token = 'a26dbf30824b1cada250b145532f12bd'
client = Client(account_sid, auth_token)

message = client.messages.create(
  from_='whatsapp:+14155238886',
  body='Severe Accident',
  media_url=['https://via.placeholder.com/150'],
  to='whatsapp:+918281884477'
)

print(message.sid)

"""# **Location**"""

!pip install geopy

!pip install geocoder

!pip install pyserial

import geocoder
from twilio.rest import Client

# Get the current GPS location
g = geocoder.ip('me')  # 'me' gets the current device's IP-based location
latitude, longitude = g.latlng

# Check if the location was successfully retrieved
if latitude and longitude:
    # Twilio account credentials
    account_sid = 'AC80a7eb2fb93c13155ed687ce9c39bb97'
    auth_token = 'a26dbf30824b1cada250b145532f12bd'
    client = Client(account_sid, auth_token)

    # Create Google Maps link with current coordinates
    location_link = f'https://www.google.com/maps/place/Echamuku,+Kunnumpuram,+Padamughal,+Vazhakkala,+Kakkanad,+Kerala/data=!4m2!3m1!1s0x3b080c8b112ae7b7:0x2ca5153c227ed0fd?sa=X&ved=1t:242&ictx=111'

    # Send the WhatsApp message with location
    message = client.messages.create(
        from_='whatsapp:+14155238886',  # Your Twilio WhatsApp number
        body=f'My current location: {location_link}',
        to='whatsapp:+918281884477'  # Your WhatsApp number
    )

    print(f"Message sent with SID: {message.sid}")
else:
    print("Could not retrieve the current location.")

"""# **to save file**"""

import json

# Example: Save YOLO detection results
detections = [{'class': 'person', 'bbox': [100, 200, 150, 250]}]  # Replace with your actual results
with open('/content/detections.json', 'w') as f:
    json.dump(detections, f)